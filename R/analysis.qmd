---
title: "PRISMA_epidemiology"
format: html
editor: visual
---

# Load Packages 

```{r}

pacman::p_load(
  readxl, readr, here, dplyr, tidyr, tidyverse, stringr,
  ggplot2, ggpubr, patchwork, cowplot, fmsb, scales,
  ggsci, paletteer, rworldmap, ggthemes, kableExtra, ggbreak,
  install = TRUE
)

# Optional package (commented out as per original)
# pacman::p_load(ggradar, install = TRUE)

# Custom functions
source(here("R", "func", "func.R"))
```


# Load Data
```{r}
# Load datasets
bibliometric_information <- read.csv(here("data", "PRISMA_extraction_bibliometric.csv"), skip = 0)
citations <- read.csv(here("data", "PRISMA_extraction_citations.csv"), skip = 0)
edi <- read.csv(here("data", "PRISMA_extraction_edi.csv"), skip = 0)
edi_author <- read.csv(here("data", "PRISMA_extraction_edi_author.csv"), skip = 0)
accessibility <- read.csv(here("data", "PRISMA_extraction_implementation.csv"), skip = 0)
metadata <- read.csv(here("data", "PRISMA_extraction_metadata.csv"), skip = 0)
transparency <- read.csv(here("data", "PRISMA_extraction_transparency.csv"), skip = 0)


# Styled tables
bibliometric_information %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

citations %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

edi %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

accessibility %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

metadata %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

transparency %>%
  kable("html") %>%
  kable_styling("bordered", position = "left") %>%
  scroll_box(width = "250%", height = "800px")

```

# Basic summary of each element 
```{r}
# Number of unique PRISMA projects
num_prisma_projects <- bibliometric_information %>% 
  distinct(PRISMA_id) %>% 
  nrow()
num_prisma_projects  # 20

# Number of unique publications
num_publications <- bibliometric_information %>% 
  distinct(study_id) %>% 
  nrow()
num_publications  # 45

# Number of unique journals
num_journals <- bibliometric_information %>% 
  distinct(journal) %>% 
  nrow()
num_journals  # 17

# Citation statistics
# Total citations
total_citations <- sum(citations$citations)
total_citations

# Average citations per publication
avg_citations_per_pub <- total_citations / num_publications
avg_citations_per_pub

# Summary statistics for citations per study
citations_per_study <- citations %>% 
  group_by(study_id) %>%
  summarise(total_citations = sum(citations))

summary(citations_per_study$total_citations)

# Author statistics
# Count of unique authors per PRISMA project
authors_per_project <- edi_author %>% 
  group_by(PRISMA_id) %>%
  summarise(unique_authors = n_distinct(author_first_name))

summary(authors_per_project$unique_authors)

# Total authors across all projects
total_authors <- sum(authors_per_project$unique_authors)
total_authors

# Language diversity statistics
language_diversity <- edi %>% 
  filter(lingual_diversity > 1) %>% 
  group_by(PRISMA_id) %>%
  summarise(total_languages = sum(lingual_diversity))

summary(language_diversity$total_languages)

# Total number of languages
total_languages <- sum(language_diversity$total_languages)
total_languages

```

# Time series plot
```{r}

###############################################################################
# 2. DEFINE A 9-COLOR PALETTE AND A CUSTOM THEME
###############################################################################
my_colors_9 <- c(
  "#6C5B7B",
  "#C06C84",
  "#F67280",
  "#F8B195",
  "#FBC3A4",
  "#F7DDC3",
  "#A38AA5",
  "#3454D1",
  "#34D1BF"
)

# Custom theme: left-align title, extra margin below title, legend at top-left
my_theme <- function() {
  theme_minimal(base_size = 14) %+replace%
    theme(
      # Title and caption
      plot.title.position   = "plot",
      plot.title            = element_text(
        face   = "bold",
        size   = 16,
        hjust  = 0,             
        margin = margin(b = 10)
      ),
      plot.caption          = element_text(
        size  = 10,
        hjust = 1,
        color = "gray40"
      ),
      
      # Legend: remove title, move to top-left, horizontal layout
      legend.position       = "top",
      legend.justification  = "left",
      legend.direction      = "horizontal",
      legend.title          = element_blank(),
      legend.text           = element_text(size = 12),
      legend.key.size       = unit(1, "cm"),  # Enlarges legend keys
      
      # Grid lines
      panel.grid.major      = element_line(color = "gray90", size = 0.4),
      panel.grid.minor      = element_blank(),
      
      # Extra margin around the entire plot area
      plot.margin           = margin(t = 20, r = 15, b = 15, l = 15)
    )
}

###############################################################################
# 3. FUNCTION FOR TOPICAL OR METHODOLOGICAL EXTENSIONS
###############################################################################
plot_prisma_citations <- function(data, join_data, title, caption, y_limit = NA) {
  ordered_levels <- data %>%
    left_join(join_data, by = "study_id") %>%
    filter(citations > 0) %>%
    group_by(PRISMA_id) %>%
    summarize(earliest_year = min(year, na.rm = TRUE), .groups = "drop") %>%
    arrange(earliest_year) %>%
    pull(PRISMA_id)
  
  data %>%
    left_join(join_data, by = "study_id") %>%
    mutate(PRISMA_id = factor(PRISMA_id, levels = ordered_levels)) %>%
    group_by(year, PRISMA_id) %>%
    summarize(citations = sum(citations, na.rm = TRUE), .groups = "drop") %>%
    ggplot(aes(x = as.numeric(year), y = citations, fill = PRISMA_id)) +
    # Remove white boundary lines by setting color = NA
    geom_area(position = "stack", alpha = 0.85, linewidth = 0.2, color = NA) +
    scale_fill_manual(
      values = my_colors_9,
      # Remove underscores from factor labels in the legend
      labels = function(x) str_replace_all(x, "_", " ")
    ) +
    scale_x_continuous(breaks = 2009:2024, expand = c(0, 0)) +
    scale_y_continuous(
      limits = c(0, y_limit),
      breaks = pretty_breaks(n = 6),
      expand = expansion(mult = c(0, 0.05))
    ) +
    labs(
      title   = title,
      x       = "Year",
      y       = "Citations",
      caption = caption
    ) +
    guides(fill = guide_legend(nrow = 2, byrow = TRUE)) +
    my_theme()
}

###############################################################################
# 4. ORIGINAL PRISMA (2009 vs. 2020)
###############################################################################
original_count <- citations %>%
  filter(
    category  == "original",
    duplicate == "no",
    year      < 2025
  ) %>%
  mutate(
    PRISMA_version = if_else(
      str_detect(study_id, "^PRISMA_2009"), 
      "PRISMA 2009", 
      "PRISMA 2020"
    )
  ) %>%
  group_by(year, PRISMA_version) %>%
  summarize(citations = sum(citations, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = as.numeric(year), y = citations, fill = PRISMA_version)) +
  geom_area(position = "stack", alpha = 0.85, linewidth = 0.2, color = NA) +   # color=NA to remove lines
  scale_fill_manual(
    values = my_colors_9[1:2],
    labels = function(x) str_replace_all(x, "_", " ")
  ) +
  scale_x_continuous(breaks = 2009:2024, expand = c(0, 0)) +
  scale_y_continuous(
    limits = c(0, 35000),
    breaks = pretty_breaks(n = 6),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(
    title   = "Yearly Citations of Original PRISMA Guidelines",
    x       = "Year",
    y       = "Citations",
    caption = "Data: PRISMA Original (2009–2024)"
  ) +
  guides(fill = guide_legend(nrow = 1)) +
  my_theme()

###############################################################################
# 5. TOPICAL EXTENSIONS
###############################################################################
topic_extensions <- plot_prisma_citations(
  data      = citations %>% filter(category == "PICO", duplicate == "no", year < 2025),
  join_data = bibliometric_information %>% select(study_id, PRISMA_id),
  title     = "Yearly Citations of PRISMA Extensions based on PECO elements",
  caption   = "Data: PRISMA Extensions based on PECO elements (2009–2024)",
  y_limit   = 300
)

###############################################################################
# 6. METHODOLOGICAL EXTENSIONS
###############################################################################
method_extensions <- plot_prisma_citations(
  data      = citations %>% filter(category == "methodological", duplicate == "no", year < 2025),
  join_data = bibliometric_information %>% select(study_id, PRISMA_id),
  title     = "Yearly Citations of PRISMA Extensions based on Methodology",
  caption   = "Data: PRISMA Extensions based on Methodology (2009–2024)"
)

###############################################################################
# 7. DISPLAY & COMBINE PLOTS
###############################################################################
# Using patchwork to combine
fig_combined <- original_count / topic_extensions / method_extensions +
  plot_layout(heights = c(1, 1, 1))

# Display combined plot
fig_combined

# Optional: Save the combined figure
 ggsave(here("figures", "citations_figure.jpg"), plot = fig_combined, width = 10, height = 14, dpi = 300)

###############################################################################
# 8. DUPLICATE CHECK (OPTIONAL)
###############################################################################
citations_by_year <- citations %>%
  filter(duplicate != "no") %>%
  group_by(year) %>%
  summarize(total_citations = sum(citations, na.rm = TRUE), .groups = "drop")

# View result
citations_by_year
```


Create a function to have a basic summary of the key information from the data.
```{r}
# define function for creating a donut plot
donut_chart <- function(data, variable, title) {
  
  df <- data %>%
    group_by(.data[[variable]]) %>%
    summarise(count = n()) %>%
    mutate(percentage = count / sum(count) * 100)
  
  labs <- paste0(df[[variable]], " (", round(df$percentage, 1), "%)")
  df$labs <- labs
  ggdonutchart(df, "count", label = "labs",
               lab.pos = "in", lab.font = "white",
               fill = variable, color = "white") +
    scale_fill_npg() +
    labs(title = title) +
    guides(fill = "none") + 
    theme(plot.title = element_text(hjust = 0.5))
}
```

# Equality-diversity-inclusion (EDI)
## Did PRISMA or its extension provides an EDI statement for the assembly of the development team?
```{r}
donut_chart(edi, 
            "edi_considered", 
            "EDI consideration in developing PRISMA checklists")
```

## Did PRISMA or its extension translate the checklist into another langauage other than English?
```{r}
# new variable
edi$lingual_diversity2 <- ifelse(edi$lingual_diversity > 1, "yes", "no")
donut_chart(edi, 
            "lingual_diversity2",
            "Multilingistics consideration in developing PRISMA checklists")
```

## Did PRISMA or its extension engage stakeholders during its development?
```{r}
donut_chart(edi, 
            "stakeholder_engagement",
            "Stakeholder engagement in developing PRISMA checklists")
```

## Is PRISMA or its extension published in an openly accessible journal?
```{r}
donut_chart(edi, 
            "open_access",
            "Open access status of PRISMA checklists")
```

## Author and Geographic diversity
```{r}
# calculate gender and geographic diversity ratios
compute_diversity_ratios <- function(data, global_south_countries) {
  data %>%
    group_by(PRISMA_id) %>%
    summarise(
      female_ratio = sum(gender_diversity == "Female", na.rm = TRUE) / 
                     sum(gender_diversity %in% c("Female", "Male"), na.rm = TRUE),
      global_south_ratio = mean(sapply(str_split(geographic_diversity, "; "), function(countries) {
        any(countries %in% global_south_countries)
      }), na.rm = TRUE)
    )
}

# global south countries list
global_south_countries <- c("China", "India", "Brazil", "South Africa", "Nigeria", "Indonesia", "Pakistan", "Bangladesh")

# compute
diversity_ratios <- compute_diversity_ratios(edi_author, global_south_countries)
# consider gender inference confidence
diversity_ratios2 <- compute_diversity_ratios(filter(edi_author, gender_diversity_confidence > 95), global_south_countries)
# combine
diversity_ratios$female_ratio <- diversity_ratios2$female_ratio

```

# Transparency

## Did the authors of a PRISMA checklist or its extensions reported that they followed established guidelines for developing reporting checklists (e.g., the EQUATOR Network’s recommendations)?
```{r}
donut_chart(transparency, 
            "guideline_adherence",
            "Guideline adherence in developing PRISMA checklists")
```

## Did the PRISMA extension report that a Delphi survey was conducted during in the development of the tool?
```{r}
donut_chart(transparency, 
            "delphi_feedback",
            "Delphi feedbeck consideration in developing PRISMA checklists")
```

## Was the development process of the PRISMA checklist or its extensions was pre-registered in a publicly accessible registry?
```{r}
donut_chart(transparency, 
            "preregistration",
            "Preregistration consideration in developing PRISMA checklists")


df1 <- transparency %>%
  group_by(preregistration) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)
# add lab
labs <- paste0(df$preregistration, " (", df$percentage, "%)")

```

## Did the authors of the PRISMA extension report that a consensus meeting(s) for defining the final list of reporting items was conducted?
```{r}
# dataframe
df <- transparency %>%
  group_by(consensus_meeting) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)
# add lab
labs <- c("no (0%)", paste0(df$consensus_meeting, " (", df$percentage, "%)"))
# manually add 'no'
df[2,1] <- "no"
df[2,2:3] <- 0

# plot
ggdonutchart(df, "count", label = labs,
             lab.pos = "in", lab.font = "white",
             fill = "consensus_meeting", color = "white") +
  scale_fill_npg() +
  labs(title = "Consensus meeting implementation in developing PRISMA checklists") +
  guides(fill = "none") + 
  theme(plot.title = element_text(hjust = 0.5))
```

## Did the authors of the PRISMA extension reported a summary of feedback provided during a consensus meeting for defining the final list of reporting items (this must be reported for each round of feedback – add to consensus_meeting_comment)?
```{r}
donut_chart(transparency, 
            "consensus_meeting_feedback",
            "Consensus meeting feedback consideration in developing PRISMA checklists")
```

## Did the authors of the PRISMA extension report that external feedback was sought to evaluate the final set of reporting items (e.g., reported a survey was conducted)?
```{r}
donut_chart(transparency, 
            "external_feedback",
            "External feedback consideration in developing PRISMA checklists")
```

## Did the author of the PRISMA extension reprot a conflict-of-interest section?
```{r}
donut_chart(transparency, 
            "conflict_interest_statement",
            "Conflict interest statement in developing PRISMA checklists")
```

## Did the authors of the PRISMA extension declare any conflict-of-interest within the statement or elaboration paper?
```{r}
donut_chart(transparency, 
            "conflict_interest_statement",
            "Conflict interest declaration in developing PRISMA checklists")
```

## Did the authors of the PRISMA extension acknowledge any limitations in its development or application within the statement or elaboration paper?
```{r}
donut_chart(transparency, 
            "limitation_acknowledged",
            "Limitation acknowledgement in developing PRISMA checklists")
```

## If it is a PRISMA extension or update, did the authors of a paper acknowledge new or modified PRISMA items.
```{r}
donut_chart(transparency, 
            "unique_items",
            "Unique items proposed in developing PRISMA checklists")
```

## Is the PRISMA extension available via open access?
```{r}
donut_chart(transparency, 
            "open_access",
            "PRISMA papers published as Open Access")
```

# Accessibility
## Is the PRISMA extension checklist available in a downloadable format (e.g., PDF, Word, CSV, Shiny app, or online form).
```{r}
donut_chart(accessibility, 
            "checklist_availability",
            "PRISMA checklist publicly available")
```

## Is the PRISMA extension checklist digital fillable format. This may include a word document, fillable pdf, excel file or shiny app (other options are available).
```{r}
donut_chart(accessibility, 
            "checklist_fillable",
            "PRISMA checklist in a format that is fillable")
```

## Is the PRISMA extension checklist provided in an open-source software (i.e., no payment needed to use software).
```{r}
donut_chart(accessibility, 
            "open_source_support",
            "PRISMA checklist in a format that is based on open source software")
```

## Did the PRISMA extension checklist is in an openly accessible and fillable format  (i.e., no needed payment to edit the software).
```{r}
donut_chart(accessibility, 
            "open_source_fillable",
            "PRISMA checklist in a format that is fillable and is based on open source software")
```

## Did the authors of the PRISMA extensions provide different version numbers for use during peer review and post-publication, or other stages / versions?
```{r}
# dataframe
df <- accessibility %>%
  group_by(version_control) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)
# add lab
labs <- c(paste0(df$version_control, " (", df$percentage, "%)"), "yes (0%)")
# manually add 'yes'
df[2,1] <- "yes"
df[2,2:3] <- 0

# plot
ggdonutchart(df, "count", label = labs,
             lab.pos = "in", lab.font = "white",
             fill = "version_control", color = "white") +
  scale_fill_npg() +
  labs(title = "PRISMA checklist in a format that has version of record\nfor use during peer review and post-publication") +
  guides(fill = "none") + 
  theme(plot.title = element_text(hjust = 0.5))
```

## Did the authors of the PRISMA extension checklist provide an explanation and/or elaboration of each item.

```{r}
donut_chart(accessibility, 
            "elaboration_document",
            "PRISMA checklist in a format that provides an explanation and/or elaboration of each item")
```

# Circular barplot

## EDI
```{r}
# data frame
edi$lingual_diversity2 <- ifelse(edi$lingual_diversity > 1, "yes", "no")
df1 <- select(edi, PRISMA_id, edi_considered, lingual_diversity2, stakeholder_engagement, open_access)
df2 <- select(transparency, PRISMA_id, guideline_adherence, delphi_feedback, preregistration, consensus_meeting, consensus_meeting_feedback, external_feedback, conflict_interest_statement, conflict_interest_declare, limitation_acknowledged, unique_items)
df3 <- select(accessibility, PRISMA_id, checklist_availability, checklist_fillable, open_source_support, open_source_fillable, version_control, elaboration_document, statement_document)

# compute percentage of "Yes" responses for each key variable
df_fig <- df1 %>%
  summarise(across(c(edi_considered , 
                     lingual_diversity2 , 
                     stakeholder_engagement,
                     open_access), 
                   ~ mean(. == "yes") * 100)) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "percent_yes") 

# add diversity info
diversity_ratios_m <- data.frame(variable = c("author_diversity", "country_diversity"),
                                 percent_yes = c(mean(diversity_ratios$female_ratio) * 100, mean(diversity_ratios$global_south_ratio) * 100))

df_fig <- rbind(df_fig, diversity_ratios_m)


df_fig$variable <- c("EDI considered", 
                     "Lingual diversity", 
                     "Stakeholder engagement",
                     "Open access status",
                     "Gender diversity",
                     "Country diversity")

# create the circular barplot
p1 <- ggplot(df_fig, aes(x = reorder(str_wrap(variable, 5), percent_yes), y = percent_yes, fill = percent_yes)) +
  
  geom_col(position = "dodge2",
    show.legend = TRUE,
    alpha = 0.9) +
  
    geom_segment(aes(x = reorder(str_wrap(variable, 5), percent_yes), y = 0, xend = reorder(str_wrap(variable, 5), percent_yes), yend = 100),
    linetype = "dashed",
    color = "gray12"
  ) +
  
  geom_hline(aes(yintercept = y), data.frame(y = seq(0, 100, by = 25)), color = "lightgrey") +
  
  annotate(x = 6.5, y = 25, label = "25%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 6.5, y = 50, label = "50%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 6.5, y = 75, label = "75%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 6.5, y = 100, label = "100%", geom = "text", color = "gray12", size = 3) +

  scale_y_continuous(
    limits = c(-10, 110),  
    expand = c(0, 0),
    breaks = seq(0, 100, by = 25)
  ) + 
  
  scale_fill_gradientn(
    "Percentage of 'Yes'",
    colours = c("#6C5B7B", "#C06C84", "#F67280", "#F8B195")
  ) +
  

  guides(
    fill = guide_colorsteps(
      barwidth = 15, barheight = 0.5, title.position = "top", title.hjust = 0.5
    )
  ) +
  
  # additional theme
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(color = "gray12", size = 8), 
    legend.position = "bottom",
    legend.box.spacing = unit(-10, "pt")
  ) +
  
  coord_polar() +
  
  labs(title = "EDI consideration of the development of PRISMA checklists") + 
  
  theme(
    text = element_text(color = "gray12"),
    plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.05),
    plot.caption = element_text(size = 10, hjust = 0.5),
    panel.background = element_rect(fill = "white", color = "white"),
    panel.grid = element_blank(),
    panel.grid.major.x = element_blank()
  ) #+ guides(fill = "none")

```

## Transparency
```{r}
# compute percentage of "Yes" responses for each key variable
df_fig <- df2 %>%
  summarise(across(
    c(
      guideline_adherence, 
      delphi_feedback, 
      preregistration,
      consensus_meeting, 
      consensus_meeting_feedback, 
      external_feedback, 
      conflict_interest_statement, 
      conflict_interest_declare, 
      limitation_acknowledged, 
      unique_items
    ), 
    ~ mean(. == "yes", na.rm = TRUE) * 100
  )) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "percent_yes")



df_fig$variable <- c("Guideline adherence", 
                     "Delphi feedback", 
                     "Preregistration",
                     "Consensus meeting", 
                     "Consensus meeting feedback", 
                     "External feedback", 
                     "Conflict interest statement", 
                     "Conflict interest declaration", 
                     "Limitation acknowledgment", 
                     "Unique items")

# create the circular barplot
p2 <- ggplot(df_fig, aes(x = reorder(str_wrap(variable, 5), percent_yes), y = percent_yes, fill = percent_yes)) +
  
  geom_col(position = "dodge2",
    show.legend = TRUE,
    alpha = 0.9) +
  
    geom_segment(aes(x = reorder(str_wrap(variable, 5), percent_yes), y = 0, xend = reorder(str_wrap(variable, 5), percent_yes), yend = 100),
    linetype = "dashed",
    color = "gray12"
  ) +
  
  geom_hline(aes(yintercept = y), data.frame(y = seq(0, 100, by = 25)), color = "lightgrey") +
  
  annotate(x = 11.5, y = 25, label = "25%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 11.5, y = 50, label = "50%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 11.5, y = 75, label = "75%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 11.5, y = 100, label = "100%", geom = "text", color = "gray12", size = 3) +

  scale_y_continuous(
    limits = c(-10, 110),  
    expand = c(0, 0),
    breaks = seq(0, 100, by = 25)
  ) + 
  
  scale_fill_gradientn(
    "Percentage of 'Yes'",
    colours = c("#6C5B7B", "#C06C84", "#F67280", "#F8B195")
  ) +
  

  guides(
    fill = guide_colorsteps(
      barwidth = 15, barheight = 0.5, title.position = "top", title.hjust = 0.5
    )
  ) +
  
   theme_minimal() +
  theme(
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(color = "gray12", size = 8), 
    legend.position = "bottom",
    legend.box.spacing = unit(-10, "pt")
  ) +
  
  coord_polar() +
  
  labs(title = "Transparency of the development of PRISMA checklists") + 
  
  theme(
    text = element_text(color = "gray12"),
    plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
    plot.subtitle = element_text(size = 12, hjust = 0.05),
    plot.caption = element_text(size = 10, hjust = 0.5),
    panel.background = element_rect(fill = "white", color = "white"),
    panel.grid = element_blank(),
    panel.grid.major.x = element_blank()
  )

```

## Accessibility
```{r}

# Compute percentage of "Yes" responses for each key variable
df_fig <- df3 %>%
  summarise(across(
    c(checklist_availability, checklist_fillable, open_source_support, 
      open_source_fillable, version_control, elaboration_document, 
      statement_document), 
    ~ mean(. == "yes") * 100
  )) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "percent_yes")

# Adjust the fifth entry to 0.05 (i.e., 5%)
df_fig$percent_yes[5] <- 0.05

# Rename variable labels
df_fig$variable <- c(
  "Checklist available", "Checklist fillable", "Open source supportable", 
  "Open source fillable", "Version of record", "Elaboration document", 
  "Statement document"
)

# Create the circular barplot
p3 <- ggplot(df_fig, aes(x = reorder(str_wrap(variable, 5), percent_yes), 
                         y = percent_yes, fill = percent_yes)) +
  geom_col(position = "dodge2", show.legend = TRUE, alpha = 0.9) +
  
  # Dashed line from 0 to 100 for each bar
  geom_segment(
    aes(x = reorder(str_wrap(variable, 5), percent_yes), y = 0,
        xend = reorder(str_wrap(variable, 5), percent_yes), yend = 100),
    linetype = "dashed", color = "gray12"
  ) +
  
  # Horizontal reference lines at 0, 25, 50, 75, 100
  geom_hline(aes(yintercept = y), 
             data.frame(y = seq(0, 100, by = 25)), color = "lightgrey") +
  
  # Percent annotations
  annotate(x = 7.5, y = 25, label = "25%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 7.5, y = 50, label = "50%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 7.5, y = 75, label = "75%", geom = "text", color = "gray12", size = 3) +
  annotate(x = 7.5, y = 100, label = "100%", geom = "text", color = "gray12", size = 3) +
  
  # y-axis scale
  scale_y_continuous(
    limits = c(-10, 110), 
    expand = c(0, 0),
    breaks = seq(0, 100, by = 25)
  ) + 
  
  # Fill scale with custom legend breaks at 40, 60, 80
  scale_fill_gradientn(
    "Percentage of 'Yes'",
    colours = c("#6C5B7B", "#C06C84", "#F67280", "#F8B195"),
    limits  = c(0, 100),
    breaks  = c(40, 60, 80),
    labels  = c("40%", "60%", "80%")
  ) +
  
  # Legend styling
  guides(fill = guide_colorsteps(
    barwidth = 15, barheight = 0.5, title.position = "top", title.hjust = 0.5
  )) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    axis.title         = element_blank(),
    axis.ticks         = element_blank(),
    axis.text.y        = element_blank(),
    axis.text.x        = element_text(color = "gray12", size = 8),
    legend.position    = "bottom",
    legend.box.spacing = unit(-10, "pt")
  ) +
  
  # Polar coordinates
  coord_polar() +
  
  # Title and theme adjustments
  labs(title = "Accessibility of PRISMA checklists") +
  theme(
    text                = element_text(color = "gray12"),
    plot.title          = element_text(face = "bold", size = 12, hjust = 0.5),
    plot.subtitle       = element_text(size = 12, hjust = 0.05),
    plot.caption        = element_text(size = 10, hjust = 0.5),
    panel.background    = element_rect(fill = "white", color = "white"),
    panel.grid          = element_blank(),
    panel.grid.major.x  = element_blank()
  )

# Print or save the plot
p3
# combine circular barplot
p <- p1 + p2 + p3 & theme(legend.position = "bottom",
                           plot.tag = element_text(size = 12, face = "bold"))
```


```{r}
library(dplyr)
library(ggplot2)

# ----------------------------------------------------
# 1) Filter data & create 'is_female'
# ----------------------------------------------------
edi_author_filter <- edi_author %>% 
  mutate(is_female = if_else(gender_diversity == "Female", 1, 0))

# ----------------------------------------------------
# 2) Summarize by PRISMA_id + author_status
# ----------------------------------------------------
final_summary <- edi_author_filter %>%
  group_by(PRISMA_id, author_status) %>%
  summarise(
    total_authors  = n(),
    female_authors = sum(is_female, na.rm = TRUE),
    pct_female     = 100 * female_authors / total_authors,
    .groups        = "drop"
  )

# ----------------------------------------------------
# 2a) Reorder 'author_status'
#     so "first" & "last" come first
#     followed by "middle", "development group"
# ----------------------------------------------------
desired_order <- c("first", "last", "middle", "development group")

final_summary <- final_summary %>%
  mutate(author_status = factor(author_status, levels = desired_order))

# ----------------------------------------------------
# 2b) Create shape variable:
#     - Triangles (24) if female_authors == 1
#     - Squares   (22) if female_authors == 0
#     - Circles   (21) otherwise (middle/dev group)
# ----------------------------------------------------
final_summary <- final_summary %>%
  mutate(
    shape_var = case_when(
      author_status %in% c("first", "last") & female_authors == 1 ~ "Female_FL",
      author_status %in% c("first", "last") & female_authors == 0 ~ "Male_FL",
      TRUE ~ "Other"
    )
  )

# ----------------------------------------------------
# 3) Create the bubble plot
# ----------------------------------------------------
bubble_plot <- ggplot(
  data = final_summary,
  aes(
    x     = author_status,
    y     = factor(PRISMA_id),
    fill  = pct_female,  # Continuous fill gradient
    shape = shape_var    # Discrete shapes
  )
) +
  # Points with black outline
  geom_point(color = "black", size = 6, stroke = 0.5) +
  
  # Manual shape scale
  scale_shape_manual(
    name   = "Author Gender",
    values = c("Female_FL" = 24,  # triangle
               "Male_FL"   = 22,  # square
               "Other"     = 21), # circle
    breaks = c("Female_FL", "Male_FL"),       # exclude "Other" from legend
    labels = c("Female", "Male"),             # rename shape labels
    guide  = guide_legend(
      title.position = "top",
      title.hjust    = 0.5,
      override.aes   = list(
        # Fill the legend keys so shapes aren't blank in the legend
        fill = c("#F67280", "#6C5B7B"),
        size = 5
      )
    )
  ) +
  
  # Continuous fill for % female
  scale_fill_gradientn(
    colours = c("#6C5B7B", "#C06C84", "#F67280", "#F8B195"),
    name    = "% Female"
  ) +
  
  coord_equal() +
  
  # Legend guides
  guides(
    fill  = guide_colorbar(
      barheight      = unit(15, "cm"),
      barwidth       = unit(0.5, "cm"),
      title.position = "top",
      title.hjust    = 0.5
    )
    # shape legend is guided above in scale_shape_manual
  ) +
  
  # Minimal theme
  theme_minimal() +
  theme(
    plot.title       = element_blank(),
    axis.title.x     = element_blank(),
    axis.title.y     = element_blank(),
    legend.position  = "right",
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_blank(),
    axis.text.x      = element_text(angle = 45, hjust = 1),
    plot.margin      = margin(20, 20, 20, 20)
  )

# ----------------------------------------------------
# 4) Print the plot
# ----------------------------------------------------
print(bubble_plot)

# ----------------------------------------------------
# 5) (Optional) Save a larger image of the plot
# ----------------------------------------------------
ggsave(
  filename = "bubble_plot.jpg", 
  plot     = bubble_plot,
  width    = 10,  
  height   = 12,  
  dpi      = 300
)



```

# Geographical map
```{r}

# 1. Prepare geo_data from your `edi_author` data (same as before).
geo_data <- edi_author %>%
  separate_rows(geographic_diversity, sep = ";") %>%
  mutate(geographic_diversity = trimws(geographic_diversity)) %>%  # remove extra spaces
  group_by(geographic_diversity) %>%
  summarise(count = n(), .groups = "drop")

colnames(geo_data) <- c("Country", "Count")

# 2. Map data.
world_map <- map_data("world")
geo_data$Country <- trimws(geo_data$Country)  
world_map$region <- trimws(world_map$region)

# 3. Fix mismatched country names.
geo_data <- geo_data %>%
  mutate(Country = case_when(
    Country == "England"         ~ "United Kingdom",
    Country == "united Kingdom"  ~ "United Kingdom",
    Country == "United States"   ~ "USA",
    Country == "Rhode Island"    ~ "USA",     # treat Rhode Island as USA
    is.na(Country)               ~ "Unknown", # handle NA
    TRUE                         ~ Country
  )) %>%
  mutate(Country = case_when(
    Country %in% c("United Kingdom", "united Kingdom") ~ "UK",  
    TRUE ~ Country
  ))

# 4. Merge map with geo_data.
map_data_final <- left_join(world_map, geo_data, by = c("region" = "Country"))

# 5. Ensure all countries have a 'Count' (NA -> 0).
geo_data_complete <- world_map %>%
  distinct(region) %>%
  left_join(map_data_final, by = "region") %>%
  mutate(Count = ifelse(is.na(Count), 0, Count))

# 6. Use absolute bins.
geo_data_complete <- geo_data_complete %>%
  mutate(Count_bin = case_when(
    Count == 0            ~ "0",
    Count <= 10           ~ "1–10",
    Count <= 20           ~ "11–20",
    Count <= 50           ~ "21–50",
    Count  > 50          ~ "50+",
  )) %>%
  # 7. Convert 'Count_bin' to factor to control the legend order.
  mutate(Count_bin = factor(Count_bin,
                            levels = c("0", "1–10", "11–20", 
                                       "21–50", "50+")))

# 8. Define a discrete color palette.
color_palette <- c(
  "0"     = "#D9D9D9",  
  "1–10"  = "#6C5B7B",
  "11–20" = "#F67280",
  "21–50" = "#F8B195",
  "50+"=    "#F9DCC4"
)

# 9. Plot the map with discrete color bins and improved fonts.
p_map <- ggplot(geo_data_complete, aes(
    x = long, y = lat, group = group, fill = Count_bin
  )) +
  geom_polygon(color = "white", size = 0.2) +  
  scale_fill_manual(
    values = color_palette,
    na.value = "grey90",
    name = "Authors by country"
  ) +
  labs(
    title = "Geographic diversity",
    x = NULL,
    y = NULL
  ) +
  theme_minimal(base_size = 12, base_family = "Arial") +
  theme(
    legend.position = "bottom",
    axis.text       = element_blank(),
    axis.ticks      = element_blank(),
    panel.grid      = element_blank(),
    plot.title      = element_text(size = 14, face = "bold"),
    legend.title    = element_text(size = 11, face = "bold"),
    legend.text     = element_text(size = 10),
    plot.margin     = margin(t = 10, r = 10, b = 10, l = 10)
  )

p_map

```

